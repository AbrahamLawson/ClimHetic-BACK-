name: 🚀 Deploy ClimHetic Backend

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    name: 🧪 Tests & Quality Check
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/requirements.txt
        pip install flake8 pytest
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      run: |
        cd src && python -m pytest ../tests/ -v --tb=short

  deploy:
    needs: test
    runs-on: ubuntu-latest
    name: 🚀 Deploy to Production
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          # Configuration
          export PROJECT_DIR="/home/abraham/climhetic-backend"
          export REPO_URL="https://github.com/AbrahamLawson/ClimHetic-BACK.git"
          export BACKEND_PORT="5001"  # Port différent du frontend
          
          # Couleurs pour les logs
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          NC='\033[0m' # No Color
          
          echo "🚀 Starting ClimHetic Backend deployment..."
          
          # Nettoyage automatique (leçon frontend min 150)
          docker stop climhetic-backend 2>/dev/null || true
          docker rm climhetic-backend 2>/dev/null || true
          docker stop $(docker ps -q --filter "publish=$BACKEND_PORT") 2>/dev/null || true
          docker rm $(docker ps -aq --filter "publish=$BACKEND_PORT") 2>/dev/null || true
          
          # Setup simple et direct
          mkdir -p $PROJECT_DIR && cd $PROJECT_DIR
          
          # Stratégie Git simple (éviter clone & replace)
          if [ -d ".git" ]; then
              git fetch origin main && git reset --hard origin/main && git clean -fd
          else
              git clone $REPO_URL .
          fi
          
          # Configuration env simple
          [ ! -f ".env" ] && cp .env.example .env
          
          # Build et deploy en une ligne (leçon frontend min 180)
          docker build -t climhetic-backend:latest . && \
          docker run -d \
            --name climhetic-backend \
            --restart unless-stopped \
            -p $BACKEND_PORT:5000 \
            --env-file .env \
            -v $(pwd)/logs:/app/logs \
            climhetic-backend:latest
          
          # Vérification simple
          sleep 15
          if curl -f http://localhost:$BACKEND_PORT/api/health >/dev/null 2>&1; then
              echo "✅ Backend deployed successfully on port $BACKEND_PORT"
          else
              echo "❌ Deployment failed"
              docker logs climhetic-backend --tail 20
              exit 1
          fi
          
          # Nettoyage automatique
          docker image prune -f
          echo "🎉 Deployment completed!"
