#!/usr/bin/env python3
"""
Test du service capteur pour v√©rifier la r√©cup√©ration des donn√©es
"""
import sys
import os

# Ajouter le r√©pertoire src au PATH
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

def test_database_connection():
    """Test de connexion √† la base de donn√©es"""
    try:
        from app.database import ping
        ping()
        print("‚úÖ Connexion √† la base de donn√©es OK")
        return True
    except Exception as e:
        print(f"‚ùå Erreur de connexion √† la base de donn√©es: {e}")
        return False

def test_salles_actives():
    """Test de r√©cup√©ration des salles actives"""
    try:
        from services.capteur_service import capteur_service
        
        print("\nüîç Test: R√©cup√©ration des salles actives")
        salles = capteur_service.get_salles_actives()
        
        if salles:
            print(f"‚úÖ {len(salles)} salle(s) trouv√©e(s)")
            for salle in salles[:3]:  # Afficher les 3 premi√®res
                print(f"   - ID: {salle['id']}, Nom: {salle['nom']}, B√¢timent: {salle['batiment']}, √âtage: {salle['etage']}")
            return salles
        else:
            print("‚ÑπÔ∏è Aucune salle active trouv√©e")
            return []
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des salles: {e}")
        return []

def test_capteurs_by_salle(salle_id):
    """Test de r√©cup√©ration des capteurs d'une salle"""
    try:
        from services.capteur_service import capteur_service
        
        print(f"\nüîç Test: R√©cup√©ration des capteurs de la salle {salle_id}")
        capteurs = capteur_service.get_capteurs_by_salle(salle_id)
        
        if capteurs:
            print(f"‚úÖ {len(capteurs)} capteur(s) trouv√©(s)")
            for capteur in capteurs:
                print(f"   - ID: {capteur['id']}, Nom: {capteur['nom_capteur']}, Type: {capteur['type_capteur']}")
            return capteurs
        else:
            print(f"‚ÑπÔ∏è Aucun capteur trouv√© pour la salle {salle_id}")
            return []
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des capteurs: {e}")
        return []

def test_moyennes_by_salle(salle_id):
    """Test de r√©cup√©ration des moyennes d'une salle"""
    try:
        from services.capteur_service import capteur_service
        
        print(f"\nüîç Test: R√©cup√©ration des moyennes de la salle {salle_id}")
        moyennes = capteur_service.get_moyennes_dernieres_donnees_by_salle(salle_id, 5)
        
        if moyennes:
            print("‚úÖ Moyennes r√©cup√©r√©es:")
            print(f"   - Temp√©rature: {moyennes.get('moyenne_temperature')} {moyennes.get('unite_temperature', '')}")
            print(f"   - Humidit√©: {moyennes.get('moyenne_humidite')} {moyennes.get('unite_humidite', '')}")
            print(f"   - Pression: {moyennes.get('moyenne_pression')} {moyennes.get('unite_pression', '')}")
            return moyennes
        else:
            print(f"‚ÑπÔ∏è Aucune donn√©e de moyenne trouv√©e pour la salle {salle_id}")
            return None
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des moyennes: {e}")
        return None

def test_temperature_by_salle(salle_id):
    """Test de r√©cup√©ration des temp√©ratures d'une salle"""
    try:
        from services.capteur_service import capteur_service
        
        print(f"\nüîç Test: R√©cup√©ration des temp√©ratures de la salle {salle_id}")
        temperatures = capteur_service.get_temperature_by_salle(salle_id, 3)
        
        if temperatures:
            print(f"‚úÖ {len(temperatures)} mesure(s) de temp√©rature trouv√©e(s)")
            for temp in temperatures:
                print(f"   - Capteur: {temp['nom_capteur']}, Valeur: {temp['valeur']} {temp['unite']}, Date: {temp['date_update']}")
            return temperatures
        else:
            print(f"‚ÑπÔ∏è Aucune temp√©rature trouv√©e pour la salle {salle_id}")
            return []
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des temp√©ratures: {e}")
        return []

def test_donnees_by_capteur(capteur_id):
    """Test de r√©cup√©ration des donn√©es d'un capteur sp√©cifique"""
    try:
        from services.capteur_service import capteur_service
        
        print(f"\nüîç Test: R√©cup√©ration des donn√©es du capteur {capteur_id}")
        donnees = capteur_service.get_dernieres_donnees_by_capteur(capteur_id, 2)
        
        if donnees:
            print("‚úÖ Donn√©es du capteur r√©cup√©r√©es:")
            capteur = donnees['capteur']
            print(f"   - Capteur: {capteur['nom_capteur']} (Type: {capteur['type_capteur']})")
            print(f"   - Salle: {capteur['salle_nom']}")
            
            donnees_list = donnees['donnees']
            if donnees_list:
                print(f"   - {len(donnees_list)} mesure(s):")
                for mesure in donnees_list:
                    print(f"     * {mesure['valeur']} {mesure['unite']} - {mesure['date_update']}")
            
            return donnees
        else:
            print(f"‚ÑπÔ∏è Aucune donn√©e trouv√©e pour le capteur {capteur_id}")
            return None
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des donn√©es du capteur: {e}")
        return None

def main():
    """Fonction principale de test"""
    print("=== Test du Service Capteur ===\n")
    
    # Test de connexion DB
    if not test_database_connection():
        print("üí• Impossible de continuer sans connexion DB")
        return
    
    # Test des salles actives
    salles = test_salles_actives()
    
    if not salles:
        print("üí• Aucune salle trouv√©e, impossible de continuer les tests")
        return
    
    # Prendre la premi√®re salle pour les tests
    salle_test = salles[0]
    salle_id = salle_test['id']
    
    print(f"\nüéØ Tests avec la salle: {salle_test['nom']} (ID: {salle_id})")
    
    # Test des capteurs de cette salle
    capteurs = test_capteurs_by_salle(salle_id)
    
    # Test des moyennes
    test_moyennes_by_salle(salle_id)
    
    # Test des temp√©ratures
    test_temperature_by_salle(salle_id)
    
    # Test des donn√©es d'un capteur sp√©cifique si on en a trouv√©
    if capteurs:
        capteur_test = capteurs[0]
        test_donnees_by_capteur(capteur_test['id'])
    
    print("\nüéâ Tests termin√©s !")

if __name__ == "__main__":
    main()
